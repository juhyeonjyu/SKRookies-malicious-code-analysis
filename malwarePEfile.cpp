#include <windows.h>
#include <iostream>

#pragma section(".packed", execute, read)
#pragma section(".antivm", read)

__declspec(allocate(".antivm")) const unsigned char anti_vm_check[] = {
    0x66, 0x48, 0xC7, 0xC2, 0x56, 0x58, 0x00, 0x00,
    0x66, 0xED
};

const unsigned char xor_key = 0xAB;
__declspec(allocate(".packed")) const unsigned char packed_code[] = {
    0x90 ^ xor_key, 0x90 ^ xor_key, 0x90 ^ xor_key, 0xC3 ^ xor_key
};

// 컴파일러 최적화를 막기 위해 실제로 데이터를 사용하는 함수
void use_data(const void* data, size_t size) {
    volatile const unsigned char* p = (const unsigned char*)data;
    unsigned char checksum = 0;
    for (size_t i = 0; i < size; ++i) {
        checksum += p[i];
    }
}

int main() {
    // 1. 의심스러운 API 사용
    HMODULE hKernel32 = GetModuleHandleA("kernel32.dll");
    if (hKernel32) {
        GetProcAddress(hKernel32, "CreateRemoteThread");
        GetProcAddress(hKernel32, "VirtualAlloc");
    }

    // 2. 난독화된 문자열 패턴 포함
    const char* b64_url = "aHR0cDovL21hbGljaW91cy5leGFtcGxlLmNvbS9wYXlsb2Fk";
    const char* b64_reg = "SEtFWV9MT0NBTF9NQUNISU5FXFxTb2Z0d2FyZVxcTWljcm9zb2Z0XFxXaW5kb3dzXFxDdXJyZW50VmVyc2lvblxcUnVu";
    const char* b64_cmd = "Y21kLmV4ZSAvaSAvYyBwb3dlcnNoZWxsIC1lbmMge30=";
    
    // 3 & 4. 커스텀 섹션 데이터 사용
    // 아래 함수 호출을 통해 컴파일러가 해당 데이터들을 제거하지 못하게 함
    use_data(b64_url, strlen(b64_url));
    use_data(b64_reg, strlen(b64_reg));
    use_data(b64_cmd, strlen(b64_cmd));
    use_data(packed_code, sizeof(packed_code));
    use_data(anti_vm_check, sizeof(anti_vm_check));

    return 0;
}